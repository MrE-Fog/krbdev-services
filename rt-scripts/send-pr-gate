#!/usr/bin/perl -w
#use lib qw (/var/rt2/perl5/lib /var/rt2/perl5/lib/sun4-solaris-thread-multi /var/rt2/perl5/lib/perl5/sun4-solaris-thread-multi);

# $Header: /cvs/krbdev/tracking/scripts/send-pr-gate,v 1.5 2003/06/17 01:07:51 tlyu Exp $

#  RT is (c) 1996-2001 Jesse Vincent <jesse@fsck.com>

my $EMAILDOMAIN = "example.com"; # user_id@EMAILDOMAIN for missing RT1 emails



my $Debug = 0;

# By default this script imports tickets into queues corresponding
# to  the  category they are imported from.
# In many situations you don't want this.
# Instead you want all tickets into one queue
# with a keyword to indicate category.
# If the following item is set then all tickets go into that queue.
my $OnlyQueue = "krb5";


use vars qw(%RT_Keywords %RT_KWselects);

use strict;
use Carp;

# Replace this with the path to your RT lib directory
use lib "/var/rt2/lib/";

# Replace this with the path to your RT etc directory
use lib "/var/rt2/etc/";

use RT::Interface::CLI  qw(CleanEnv LoadConfig DBConnect 
			   GetCurrentUser GetMessageContent);
use Date::Format;
use MIME::Entity;
use Mail::Internet;
use MIME::Parser;
use RT::User;
use RT::Queue;
use RT::Ticket;
use RT::Transaction;
#Clean out all the nasties from the environment
CleanEnv();

#Load etc/config.pm and drop privs
LoadConfig();

#Connect to the database and get RT::SystemUser and RT::Nobody loaded
DBConnect();
use strict;

my $GNATSROOT = '/var/tmp/gnats-db';
my $VersionKWRoot = '/k5/version/';
my $CategoryKWRoot ='/k5/component/';
my $EnhancementKW = '/k5/tag/enhancement';
# Create users from Responsible file
open(CLASS, ">class.dat");
open(RELEASE, ">release.dat");


	%RT_KWselects = ();
    my $queue = new RT::Queue($RT::SystemUser);
	my $QueueName;
		$QueueName = $OnlyQueue;
    $queue->Load($QueueName);
ImportTicket($queue);



sub ImportTicket {
    my $queue = shift;
	my %keywords;

    
    open(TICKET, "<&STDIN");
    
    my @tick = <TICKET>;
    
    my @ticket = @tick; #make a copy to bastardize.

    my @Number = grep (s/^>Number:\s+(\d*)$/$1/, @ticket);
    my @Requestors = grep (s/^From:\s+(.*)$/$1/, @ticket);
    my @Subject = grep (s/^>Synopsis:\s+(.*)$/$1/, @ticket);
    my @Confidential = grep (s/^>Confidential:\s+(.*)$/$1/, @ticket);
    my @Category = grep (s/^>Category:\s+(.*)$/$1/, @ticket);
    my @Severity = grep (s/^>Severity:\s+(.*)$/$1/, @ticket);
    my @Priority = grep (s/^>Priority:\s+(.*)$/$1/, @ticket);
    my @Responsible = grep (s/^>Responsible:\s+(.*)$/$1/, @ticket);
    my @Release = grep (s/^>Release:\s+(.*)$/$1/, @ticket);
	    my @State = grep (s/^>State:\s+(.*)$/$1/, @ticket);
    my @Class = grep (s/^>Class:\s+(.*)$/$1/, @ticket);
    my @Arrival = grep (s/^>Arrival-Date:\s+(.*)$/$1/, @ticket);
    my @Closed = grep (s/^>Closed-Date:\s+(.*)$/$1/, @ticket);
    my @LastUpdated = grep (s/^>Last-Modified:\s+(.*)$/$1/, @ticket);
    #    print "Number is ".join(',',@Number) ."\n";
    
    unless (@Subject) {
      open(MAILGATE, "|/var/rt2/bin/rt-mailgate  --queue krb5 --action correspond")
	or die "Unable to open mailgate: $!\n";
      print MAILGATE @tick;
      close MAILGATE;
      exit $?>>8;
    }
    
    my $requestor;
    if (defined $Category[0]) {
	chomp $Category[0];
	$keywords{Component} = [$CategoryKWRoot.$Category[0]];
    }
$keywords{Version_reported} = [$VersionKWRoot.ResolveRelease($Release[0])] if
ResolveRelease($Release[0]);
    $keywords{Tags} = [$EnhancementKW]
      if $Class[0] =~ /change-request/i;


    if ($Requestors[0] =~ /\<(.*?)\>/) {
	$requestor = "$1";
    }
    elsif ($Requestors[0] =~ /^(\S*?)@(\S*?)$/) {
	$requestor = "$1\@$2";
    }	
    elsif ($Requestors[0] =~ /^(\S*?)@(\S*?)\s*?\(.*?\)$/) {
	$requestor = "$1\@$2";
    }	
    else { 
	$requestor = $Requestors[0];
    }
    my $Status = ResolveStateToStatus($State[0]);
    my $Priority = ResolvePriority($Priority[0]);
   
	print CLASS "@Class\n";
print RELEASE "@Release\n";
	        my $Arrival = new RT::Date($RT::SystemUser);
		$Arrival->Set (Format =>'unknown',
Value=> $Arrival[0]);
	        my $Closed = new RT::Date($RT::SystemUser);
		$Closed->Set (Format =>'unknown',
Value=> $Closed[0]);
	        my $LastUpdated = new RT::Date($RT::SystemUser);
		$LastUpdated->Set (Format =>'unknown',
Value=> $LastUpdated[0]);

  
    chomp $Responsible[0];
    chomp $Subject[0];
        my $MIMEObj = MIME::Entity->build(ContentType => 'text/plain',
					  Data => \@tick);

	my $Ticket = new RT::Ticket($RT::SystemUser);
	$Ticket->Create ( 
			  Subject => $Subject[0],
			  Queue => $queue->id,
			  Requestor => [ $requestor ],
			  Owner => $Responsible[0],
			  InitialPriority => $Priority,
			  Status => $Status,
Resolved => $Closed->ISO(),
Updated => $LastUpdated->ISO(),
			   	MIMEObj => $MIMEObj
			);
	  # Add keywords
while (my ($kw, $vals) = each %keywords) {
$kw = rt_check_kwselect($queue, $kw);
foreach (@$vals) {
	my $id;

$id = rt_check_keyword($_);
	 $Ticket->AddKeyword(KeywordSelect => $kw,
Keyword       => $id);

}
}

   #ChunkAuditTrail(@ticket);
}


sub ResolvePriority {
    my $prio = shift;
    return('75') if ($prio =~ /high/i);
    return('50') if ($prio =~ /med/i);
    return('25') if ($prio =~ /low/i);

    warn "Couldn't resolve priority $prio\n";
    return('0');
}  


sub ResolveStateToStatus {
    my $state = shift;
    #In gnats, 'open' means untouched
    return ('new') if ($state =~ /open/i);
    return ('resolved') if ($state =~ /closed/i);
    return ('stalled') if ($state =~ /feedback/i);
    return ('stalled') if ($state =~ /suspended/i);
    return ('open') if ($state =~ /analyzed/i);
    warn "Couldn't resolve state $state\n";
    return ('open');
}  

sub ResolveRelease($) {
  my ($release) = @_;
  if ($release =~ /krb5-(\d[.\d]*)/i ){
    return ($1);
  }
  return ();
}



if (0) {
    #Create /GNATS
    my $gnatskw = RT::Keyword->new($RT::SystemUser);
    my ($val, $msg) = 
      $gnatskw->Create( Name => 'GNATS',
			 Description => 'KeywordSelects imported from GNATS',
			 Parent => 0 );

    #Create /GNATS/Severity
    my $sev_keyword = RT::Keyword->new($RT::SystemUser);
    my ($area, $areamsg) = 
      $sev_keyword->Create( Name => 'Severity',
			    Description => 'Autocreated by GNATS import',
			    Parent => $gnatskw->id );
  #Create /GNATS/Class
    my $class_keyword = RT::Keyword->new($RT::SystemUser);
    ($area, $areamsg) = 
      $class_keyword->Create( Name => 'Class',
			    Description => 'Autocreated by GNATS import',
			    Parent => $gnatskw->id );
}	




sub ChunkAuditTrail {
	my @ticket = @_;

	while (shift @ticket) {
	  last if $_ = /^>Audit-Trail:$/;
	} 
	print "Remainder of ticket:\n" . join('',@ticket);
	print "Done\n";
}

sub rt_check_keyword {
  my($kwpath) = @_;
  my($Keyword, $trans, $msg, $parent, $name, $desc);

  if (!exists($RT_Keywords{$kwpath})) {
    $Keyword = new RT::Keyword($RT::SystemUser);
    ($trans, $msg) = $Keyword->LoadByPath($kwpath);
	return unless $trans;
    $RT_Keywords{$kwpath} = $Keyword->id();
  }
  $RT_Keywords{$kwpath};
}

sub rt_check_kwselect {
  my($queue, $kw) = @_;
  my($KeywordSelect, $id);

  if (!exists($RT_KWselects{$kw})) {
    $KeywordSelect = new RT::KeywordSelect($RT::SystemUser);
    $id = $KeywordSelect->LoadByName(Name => $kw, Queue => $queue->id());
    die "Failed to load kwselect $kw\n" unless $id;
    $RT_KWselects{$kw} = $id;
  }
  $RT_KWselects{$kw};
}
