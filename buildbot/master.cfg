# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.locks import WorkerLock

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### WORKERS

# Keep worker information in a separate file.
import os.path
with open(os.path.join(basedir, 'workers.py')) as f:
    exec(f.read())
c['workers'] = workers

# Listen only on loopback.
c['protocols'] = {'pb': {'port': 'tcp:9989:interface=127.0.0.1'}}

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource

c['change_source'] = []
c['change_source'].append(PBChangeSource())

####### SCHEDULERS

platset = set()
for w in workers:
    platform = w.properties.getProperty('platform')
    if platform is not None:
        platset.add(platform)
platforms = sorted(platset)


c['schedulers'] = [
    schedulers.AnyBranchScheduler(name="build", treeStableTimer=300,
                                  builderNames=platforms),
    schedulers.SingleBranchScheduler(name="master-doc", branch='master',
                                     treeStableTimer=300,
                                     builderNames=['master-doc']),
    schedulers.Nightly(name="master-coverity", branch='master',
                       dayOfWeek=[1, 3, 5], hour=3,
                       builderNames=['master-coverity'])]

####### BUILDERS

anonrepo = "git://krbdev-buildbot.mit.edu/krb5.git"

checkout_step = steps.Git(repourl=anonrepo, mode='full', method='clobber')

cmd = "(cd src && autoreconf -v && ./configure --with-ldap)"
config_step = steps.Configure(command=cmd)
# For the Solaris worker, we need to use some libraries from OpenCSW.
cmd = ("(cd src && autoreconf -v && ./configure --with-ldap "
       "CPPFLAGS=-I/opt/csw/include LDFLAGS='-L/opt/csw/lib -R/opt/csw/lib')")
config_step_solaris = steps.Configure(command=cmd)

build_step = steps.Compile(command="(cd src && make)")

# Lock to avoid running "make check" in parallel on a single host.
# They will fail due to hardcoded port numbers.
testlock = WorkerLock("test")
check_step = steps.Compile(command="(cd src && make check)",
                           locks=[testlock.access('exclusive')],
                           description=["checking"],
                           descriptionDone=["check"])
# For the Solaris worker, we have to specify where to find slapd.
check_step_solaris = steps.Compile(command="(cd src && make check)",
                                   env={"SLAPD": "/opt/csw/libexec/slapd"},
                                   locks=[testlock.access('exclusive')],
                                   description=["checking"],
                                   descriptionDone=["check"])

cmd = "(cd src && make install DESTDIR=`pwd`/dest)"
install_step = steps.Compile(command=cmd, description=["installing"],
                             descriptionDone=["test", "install"])

cmd = ("(cd src && make distclean && echo 'checking git status' && "
       "if git status -s | grep '^ [DM]'; then exit 1; else :; fi)")
clean_step = steps.Compile(command=cmd, description=["cleaning"],
                           descriptionDone=["test", "clean"])

f1 = util.BuildFactory([checkout_step, config_step, build_step, check_step,
                        install_step, clean_step])
f1_solaris = util.BuildFactory([checkout_step, config_step_solaris, build_step,
                                check_step_solaris, install_step, clean_step])
c['builders'] = []
for platform in platforms:
    f = f1_solaris if platform == 'sparc-s10' else f1
    workernames = [w.workername for w in workers
                   if w.properties.getProperty('platform') == platform]
    c['builders'].append(util.BuilderConfig(name=platform,
                                            workernames=workernames,
                                            factory=f))

# Documentation builder
f2 = util.BuildFactory()
f2.addStep(steps.Git(repourl=anonrepo, mode='full', method='clobber'))
logofile = "/afs/athena.mit.edu/astaff/project/kerberos/mitkc-logo-sm.png"
cmd = ("(cd src/doc && HTML_LOGO=" + logofile +
       " make -f Makefile.in SPHINX_ARGS=-W htmlsrc)")
f2.addStep(steps.ShellCommand(command=cmd, description=["docs"],
                              descriptionDone=["docs"], haltOnFailure=True))
cmd = ["tar", "zcf", "rst_html.tgz", "doc/html"]
f2.addStep(steps.ShellCommand(command=cmd, description="tar",
                              descriptionDone="tar", haltOnFailure=True))
f2.addStep(steps.FileUpload(workersrc="rst_html.tgz",
                            masterdest="~/master/rst_html.tgz"))

c['builders'].append(util.BuilderConfig(name='master-doc',
                                        builddir='master-doc',
                                        workernames=['v16'], factory=f2))

# Coverity scan.
f3 = util.BuildFactory()
f3.addStep(steps.Git(repourl=anonrepo, mode='full', method='clobber'))
cmd = "(cd src && autoreconf -v && ./configure --with-ldap)"
f3.addStep(steps.Configure(command=cmd))
f3.addStep(steps.Compile(command="(cd src && cov-build --dir cov-int make)"))
cmd = ["tar", "-C", "src", "-zcf", "kerberos.tgz", "cov-int"]
f3.addStep(steps.ShellCommand(command=cmd, description="tar",
                              haltOnFailure=True))
cmd = ("curl --include "
       "--form file=@kerberos.tgz "
       "--form token=$(cat $HOME/coverity-password) "
       "--form email=devnull@mit.edu "
       "--form version=master "
       "--form description=krb5 "
       "https://scan.coverity.com/builds?project=kerberos")
f3.addStep(steps.ShellCommand(command=cmd, description="uploading",
                              descriptionDone="upload"))

# The worker for the Coverity scan must have the cov-analysis binaries
# installed in the worker's path and must have the build password in
# $HOME/coverity-password.  It must also have the OpenLDAP dev package
# installed (e.g. libldap2-dev on Ubuntu 10.04).
c['builders'].append(util.BuilderConfig(name='master-coverity',
                                        builddir='master-coverity',
                                        workernames=['v13'], factory=f3))

####### BUILDBOT SERVICES

c['services'] = []

####### PROJECT IDENTITY

c['title'] = "MIT Kerberos"
c['titleURL'] = "https://k5wiki.kerberos.org/"

c['buildbotURL'] = "https://krbdev.mit.edu/buildbot/"

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
