#!/usr/bin/perl -w
use strict;

use lib "/opt/rt4/lib";
use lib "/opt/rt4/etc";
use MIME::Entity;

# {{{ Get the RT stuff set up

# {{{ sub rt_handler 

sub rt_handler {
    my (@LogMessage) = (@_);

    use RT::Interface::CLI qw(Init);
    require RT::Ticket;

    Init();

    #Get the current user all loaded
    my ($Gecos, $CurrentUser);

    require RT::CurrentUser;

    #Instantiate a user object

    $Gecos=$ARGV[0];

    #If the current user is 0, then RT will assume that the User object
    #is that of the currentuser.

    $CurrentUser = new RT::CurrentUser();
    $CurrentUser->LoadByGecos($Gecos);

    unless ($CurrentUser->Id) {
	$RT::Logger->debug("No user with a unix login of '$Gecos' was found.");
    }

    if ( !$CurrentUser->Id ) {
        print
	    "No valid RT user found. RT cvs handler disengaged.\n" .
	    "Please consult your RT administrator.\n";
        return;
    }

    my (@commands) = find_commands( \@LogMessage );

    my ( @tickets, @errors );

    my ($reply) = ActOnPseudoHeaders(
	$CurrentUser, \@LogMessage,
	ConstructTicketHash($CurrentUser, @commands ));

    print "$reply\n" if ($reply);
    print join ( "\n", @errors );
    print "\n";

}

# }}}

# {{{ sub find_commands

sub find_commands {
    my $lines = shift;
    my (@pseudoheaders);

    while ( my $line = shift @{$lines} ) {
        next if $line =~ /^\s*?$/ and not scalar(@pseudoheaders);

        if ( $line =~ /^(?:RT-)?(.*?):\s*(.*?)\s*$/i ) {
            push ( @pseudoheaders, [$1, $2] );
        }

        #If we find a line that's not a command, get out.
        else {
            unshift ( @{$lines}, $line );
            last;
        }
    }

    return (@pseudoheaders);

}

# }}}

# {{{ sub ActOnPseudoHeaders

=item ActOnPseudoHeaders $PseudoHeaders

=cut

sub ActOnPseudoHeaders {
    my $CurrentUser = shift;
    my @LogMessage = @{shift(@_)};
    my (%actions) = (@_);
    my $ResultsMessage = '';
    my $Ticket         = RT::Ticket->new($CurrentUser);
    my $message = new MIME::Entity;
    $message->build(
        From    => $CurrentUser->EmailAddress,
        Subject => 'git commit',
        Data    => \@LogMessage
	);

    foreach my $ticket_id (keys %actions) {
	my ($val);
	my $msg = '';
	my $send_message = 1;
	my %ticket_actions = %{$actions{$ticket_id}};

	$ResultsMessage .= ">>> $ticket_id\n";

	if ($ticket_id eq 'new') {
	    my %params = (
		MIMEObj => $message,
		);
	    $send_message = 0;
	    my @possible_params = qw(
id Cc AdminCc Requestor
Subject Queue Owner
);
	    foreach (@possible_params) {
		$params{$_} = $ticket_actions{lc $_}
		if (exists $ticket_actions{lc $_}) ;
		delete $ticket_actions{lc $_};
	    }
	    my ($id, $txn, $error ) = $Ticket->Create(%params);
	    unless ($id) {
		$ResultsMessage .= "Couldn't create ticket:$error\n";
		next ;
	    }
	} else {
	    $val = $Ticket->Load($ticket_id);
	    unless ($val) {
		$ResultsMessage .=
		    "ERROR: Couldn't load ticket '$ticket_id': $msg.\n"
		    . "Aborting to avoid unintended ticket modifications.\n"
		    . "The following commands were not proccessed:\n\n"
		    . join ( "\n", PrintActions(%ticket_actions) );
		return ($ResultsMessage);
	    }
	}
	unless ( $Ticket->Id ) {
	    $ResultsMessage .= "No Ticket specified. Aborting ticket "
		. "modifications\n\n"
		. "The following commands were not proccessed:\n\n"
		. join ( "\n", PrintActions(%ticket_actions) );
	    return ($ResultsMessage);
	}
	$ResultsMessage .= "Ticket " . $Ticket->Id . " loaded\n";



# Deal with the basics
	foreach my $command (keys %ticket_actions) {
	    my $args = $ticket_actions{$command};
	    $ResultsMessage .= ">>>$command\n";

	    if ( $command =~ /^(Subject|Owner|Status|Queue)$/i ) {
		my $method = 'Set' . ucfirst( lc($1) );
		( $val, $msg ) = $Ticket->$method($args);
	    }

# Deal with the dates
	    elsif ( $command =~ /^(due|starts|started|resolved)$/i ) {
		my $method = 'Set' . ucfirst( lc($1) );
		my $date   = new RT::Date($CurrentUser);
		$date->Set( Format => 'unknown', Value => $args );
		( $val, $msg ) = $Ticket->$method( $date->ISO );
	    }

	    # Deal with the watchers.  Leading underscore on the
	    # command defers the watcher setting until after ticket
	    # creation (which avoids the ticket creation autoresponse
	    # email).
	    elsif ( $command =~ /^_?(requestor|requestors|cc|admincc)$/i ) {
		$msg = "";
		foreach (@{$args}) {
		    my $operator = "+";
		    my ($type);
		    if (  /^(\+|\-)(.*)$/ ) {
			$operator = $1;
			$_     = $2;
		    }
		    $type = 'Requestor' if ( $command =~ /^_?requestor/i );
		    $type = 'Cc'        if ( $command =~ /^_?cc/i );
		    $type = 'AdminCc'   if ( $command =~ /^_?admincc/i );

		    if ( $operator eq '+' ) {
			( $val, $msg ) = $Ticket->AddWatcher(
			    Type  => $type,
			    Email => $_
			    );
		    } elsif ( $operator eq '-' ) {
			( $val, $msg ) = $Ticket->DeleteWatcher(
			    Type  => $type,
			    Email => $_
			    );
		    }
		}
	    }

# {{{ Deal with custom fields
	    else {
		$msg = ActOnCustomField($Ticket, $command, $args);
	    }

# }}}

	    $ResultsMessage .= $msg . "\n";
	}
	if ($send_message) {
	    if ( $LogMessage[0] =~ /^(comment|private)$/ ) {
		( $val, $msg ) = $Ticket->Comment( MIMEObj => $message );
	    }
	    else {
		( $val, $msg ) = $Ticket->Correspond( MIMEObj => $message );
	    }
	}
    }

    return ($ResultsMessage);

}

# }}}

sub ActOnCustomField {
    my ($Ticket, $command, $args) = (@_);
    my $msg = '';
    my $cf = $Ticket->QueueObj->CustomField($command);

    unless ( $cf->Id ) {
	return ("ERROR: couldn't find a custom field "
		. "selection matching '$command'\n");
    }

    foreach my $arg (@{$args}) {
	my $val;
	# Default is to add custom fields
	my $op = '+';
	my $onemsg = '';
	if ( $arg =~ /^(\-|\+)(.*)$/ ) {
	    $op   = $1;
	    $arg = $2;
	}

	if ( $op eq '-' ) {
	    ( $val, $onemsg ) = $Ticket->AddCustomFieldValue(
		Field => $cf->id,
		Value => $arg
		);
	}
	elsif ( $op eq '+' ) {
	    ( $val, $onemsg ) = $Ticket->AddCustomFieldValue(
		Field => $cf->id,
		Value => $arg
		);
	}
	else {
	    $onemsg = "'$op' is not a valid operator.\n";
	}
	$msg .= $onemsg . "\n";
    }
    return ($msg);
}

#{{{
sub ConstructTicketHash {
    my ($user, @PseudoHeaders) = (@_);
    my %Actions;
    my $ticket_action;
    my $email = $user->EmailAddress;
    foreach my $action (@PseudoHeaders) {
	my ($command, $args) = @$action;
	if ( $command =~ /^ticket$/i ) {
	    unless (exists $Actions{$args}) {
		$Actions{$args} = {
		    status => 'resolved',
		    requestor=> [],
		    cc => [],
		    admincc => [],
		    owner => $user->Id
		};
	    }
	    if ($args eq 'new') {
		push @{$Actions{$args}{_requestor}}, $email;
		$Actions{$args}{queue} = "krb5";
	    }
	    $ticket_action = $Actions{$args};
	    next;
	}
	if ($command =~ /^(id|Subject|Owner|Status|Queue)$/i ||
	    $command =~ /^(due|starts|started|resolved)/i) {
	    # Single-valued argument
	    $ticket_action->{lc($command)} = $args;
	} else {
	    $command =~ s/[Rr]equest[eo]rs?/Requestor/;
	    # List-valued argument
	    push @{$ticket_action->{lc($command)}}, $args;
	}
    }
    return (%Actions);
}

# {{{ sub untaint 
sub untaint {
    my $val = shift;

    if ( $val =~ /^([-\#\/\w.]+)$/ ) {
        $val = $1;    # $data now untainted
    }
    else {
        die "Bad data in $val";    # log this somewhere
    }
    return ($val);
}

# }}}
#{{{
sub PrintActions {

# not implemented
}
#}}}

Init();

#Drop setgid permissions
rt_handler(<STDIN>);
